{"version":3,"sources":["draw.js"],"names":["canvas","document","querySelector","ctx","getContext","xHover","getElementById","yHover","startButton","gridBoxes","drawGrid","strokeStyle","clearRect","CANVAS_WIDTH","CANVAS_HEIGHT","i","maxRow","j","maxCol","Cell","beginPath","rect","BOX_WIDTH","stroke","updateNeighborsLivingNeighbors","cell","updateVal","living","neighbors","forEach","livingNeighbors","toggleLife","thisCell","fillStyle","getFillColor","fillRect","setNextStates","row","rowID","colID","setNextState","applyNextStates","stateFlip","nextState","advanceState","animate","getRowColID","e","Math","floor","offsetY","offsetX","moveListener","rowHover","innerHTML","colHover","clickListener","isRunning","animator","startListener","setInterval","style","backgroundColor","clearInterval","addEventListener"],"mappings":"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","file":"draw.01a1cd59.js","sourceRoot":"..","sourcesContent":["const canvas = document.querySelector('canvas')\nconst ctx = canvas.getContext('2d')\nconst xHover = document.getElementById('xHover')\nconst yHover = document.getElementById('yHover')\nconst startButton = document.getElementById('startButton')\n\nlet gridBoxes = [[]]\n\nconst drawGrid = () => {\n  ctx.strokeStyle='#555555'\n  ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n  for(let i=0;i<maxRow;i++) {\n    gridBoxes[i] = []\n    for(let j=0;j<maxCol;j++) {\n      gridBoxes[i][j] = new Cell(i, j)\n      ctx.beginPath()\n      ctx.rect(j*BOX_WIDTH,i*BOX_WIDTH,BOX_WIDTH,BOX_WIDTH)\n      ctx.stroke()\n    }\n  }\n}\n\n// tie this action to flipping of a cell state as close to possible\nconst updateNeighborsLivingNeighbors = (cell) => {\n  const updateVal = cell.living ? 1 : -1\n  cell.neighbors.forEach(([i, j]) => { gridBoxes[i][j].livingNeighbors += updateVal })\n}\n\nconst toggleLife = (i, j) => {\n  const thisCell = gridBoxes[i][j]\n  ctx.beginPath()\n  thisCell.living = !thisCell.living\n  updateNeighborsLivingNeighbors(thisCell)\n  ctx.fillStyle = getFillColor(thisCell)\n  ctx.fillRect(j*BOX_WIDTH+1,i*BOX_WIDTH+1,BOX_WIDTH-2,BOX_WIDTH-2)\n  ctx.stroke()\n}\n\n// go through the conway life cycle:\n//  1. for all cells, determine next state based on current state, # living neighbors\n//  2. store next state in Cell instance variable\n//  3. loop cell by cell, keep/flip state based on stored next state\n//    a) set new state\n//    b) updateNeighborsLivingNeighbors\n//    c) nullify stored next state\n// end cycle, repeat with next animation frame\n\nconst setNextStates = () => {\n  gridBoxes.forEach((row, rowID) => {\n    row.forEach((thisCell, colID) => {\n      thisCell.setNextState() // conway rules\n    })\n  })\n}\n\nconst applyNextStates = () => {\n  gridBoxes.forEach((row, rowID) => {\n    row.forEach((thisCell, colID) => {\n      const stateFlip = thisCell.living != thisCell.nextState\n      thisCell.advanceState() // conway rules\n      if (stateFlip){\n        updateNeighborsLivingNeighbors(thisCell)\n        ctx.beginPath()\n        ctx.fillStyle = getFillColor(thisCell)\n        ctx.fillRect(colID*BOX_WIDTH+1,rowID*BOX_WIDTH+1,BOX_WIDTH-2,BOX_WIDTH-2)\n        ctx.stroke()\n      }\n    })\n  })\n}\n\nconst animate = () => {\n  setNextStates()\n  applyNextStates()\n}\n\n// utilities\nconst getRowColID = (e) => {\n  const rowID = Math.floor(e.offsetY/BOX_WIDTH)\n  const colID = Math.floor(e.offsetX/BOX_WIDTH)\n  return [rowID, colID]\n}\n\nconst getFillColor = (thisCell) => thisCell.living ? '#770000' : 'white'\n\n// event handlers\nconst moveListener = (e) => {\n  const [rowID, colID] = getRowColID(e)\n  rowHover.innerHTML = rowID\n  colHover.innerHTML = colID\n}\n\nconst clickListener = (e) => {\n  const [rowID, colID] = getRowColID(e)\n  toggleLife(rowID, colID)\n}\n\nlet isRunning = false\nlet animator\nconst startListener = (e) => {\n  if (!isRunning) {\n    animator = setInterval(animate, 500)\n    startButton.innerHTML = \"Pause Life\"\n    startButton.style.backgroundColor = \"#f57234\"\n  } else {\n    clearInterval(animator)\n    startButton.innerHTML = \"Start Life\"\n    startButton.style.backgroundColor = \"#81da6b\"\n  }\n  isRunning = !isRunning\n}\n\ncanvas.addEventListener('click', clickListener)\ncanvas.addEventListener('mousemove', moveListener)\ncanvas.addEventListener('mouseout',() => {\n  rowHover.innerHTML = '---'\n  colHover.innerHTML = '---'\n})\n\nstartButton.addEventListener('click', startListener)\n\n// when browser loads script\ndrawGrid()\n"]}