{"version":3,"sources":["src/js/constants.js","src/js/Cell.js","src/js/utilities.js","src/js/index.js"],"names":["CANVAS_WIDTH","CANVAS_HEIGHT","BOX_WIDTH","GRID_COLOR","LIVE_COLOR","maxRow","maxCol","RAND_DENSITY","GLIDER_ID","LWSS_ID","MWSS_ID","HWSS_ID","GLIDER_PATTERN","LWSS_PATTERN","MWSS_PATTERN","HWSS_PATTERN","spaceshipPatterns","LOCKED","EDITING","CLONING","Cell","r","c","row","col","living","livingNeighbors","neighbors","filter","i","j","nextState","drawGrid","ctx","numRows","numCols","strokeStyle","clearRect","rowID","colID","beginPath","rect","stroke","blankCellGrid","w","h","Array","map","_","randomCellGrid","density","cell","Math","random","isValidCell","getFillColor","thisCell","getRowColID","e","documentOrigin","offsetX","offsetY","canvasNode","clientX","getBoundingClientRect","left","clientY","top","floor","fadeIn","painter","interval","opacity","fader","setInterval","clearInterval","globalAlpha","paintCell","fillStyle","fillRect","paintAllCells","grid","forEach","updateNeighborsLivingNeighbors","updateVal","toggleLife","setClickDrawCursor","eraseMode","undefined","classList","remove","add","drawDragPattern","patternCanvas","patternScheme","patternCtx","getContext","val","dropPattern","pattern","topRow","round","leftCol","botRow","length","rightCol","placePattern","topRowID","leftColID","patternVal","cloneIntoCanvas","getPatternFromGrid","clonePatternFromGrid","topLeft","botRight","slice","gridBoxes","customGrid","animator","customDragPatternListener","cloneTopLeft","cloneBotRight","clonePattern","cloneFrame","canvas","document","getElementById","xHover","yHover","startButton","resetButton","randomButton","spaceshipNodes","Object","fromEntries","Map","keys","id","lockButton","editButton","cloneButton","customCanvas","customCtx","init","entries","node","setAttribute","setNextStates","setNextState","applyNextStates","stateFlip","advanceState","animate","isRunning","startListener","innerHTML","toggle","resetListener","randomListener","seedArray","drawingCells","clickDrawStartListener","mouseUpListener","moveListener","rowHover","colHover","dragImage","dragPatternStartListener","originNode","shiftX","shiftY","clonedYet","movePatternListener","pageX","pageY","cloneNode","style","position","zIndex","body","append","addEventListener","dropPatternListener","removeEventListener","removeChild","customStates","button","class","curCustomState","setCustomState","newState","stateProps","state","isNewState","disabled","customPattern","cloneStartListener","cloneDragListener","cloneEndListener","lockListener","editListener","cloneListener","moveCustomListener","clickDrawCustomListener","cloneSelecting","createElement","width","height","border","drawCloneFrame","appendChild","min","canvasLeftX","window","scrollX","canvasTopY","scrollY","cellW","cellH"],"mappings":"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","file":"js.3f454cca.js","sourceRoot":"..","sourcesContent":["export const CANVAS_WIDTH = 1200\nexport const CANVAS_HEIGHT = 600\nexport const BOX_WIDTH = 20\nexport const GRID_COLOR = '#555555'\nexport const LIVE_COLOR = '#770000'\n\nexport const maxRow = CANVAS_HEIGHT/BOX_WIDTH\nexport const maxCol = CANVAS_WIDTH/BOX_WIDTH\n\nexport const RAND_DENSITY = 0.4\n\nconst GLIDER_ID = 'gliderPattern' // needs to match DOM element ID\nconst LWSS_ID = 'lwssPattern'\nconst MWSS_ID = 'mwssPattern'\nconst HWSS_ID = 'hwssPattern'\nconst GLIDER_PATTERN = [\n  [1,0,0],\n  [0,1,1],\n  [1,1,0]\n]\nconst LWSS_PATTERN = [\n  [0,1,1,0,0],\n  [1,1,1,1,0],\n  [1,1,0,1,1],\n  [0,0,1,1,0],\n]\nconst MWSS_PATTERN = [\n  [0,1,1,1,0,0],\n  [1,1,1,1,1,0],\n  [1,1,1,0,1,1],\n  [0,0,0,1,1,0]\n]\nconst HWSS_PATTERN = [\n  [0,1,1,1,1,0,0],\n  [1,1,1,1,1,1,0],\n  [1,1,1,1,0,1,1],\n  [0,0,0,0,1,1,0]\n]\n\nexport const spaceshipPatterns = {\n  [GLIDER_ID]: GLIDER_PATTERN,\n  [LWSS_ID]: LWSS_PATTERN,\n  [MWSS_ID]: MWSS_PATTERN,\n  [HWSS_ID]: HWSS_PATTERN\n}\n\nexport const [LOCKED, EDITING, CLONING] = [0,1,2]\n","export default class Cell {\n  constructor(r, c, maxRow, maxCol) {\n    this.row = r\n    this.col = c\n    this.living = false\n    this.livingNeighbors = 0\n    this.neighbors = [\n      [r-1, c-1], [r-1, c], [r-1, c+1],\n      [r, c-1], /* [r, c] */[r, c+1],\n      [r+1, c-1], [r+1, c], [r+1, c+1]\n    ].filter(([i, j]) => (i >= 0 && j >= 0 && i < maxRow && j < maxCol))\n    this.nextState = null\n  }\n\n  setNextState() {\n    if (this.livingNeighbors == 3 || this.livingNeighbors == 2 && this.living) {\n      this.nextState = true\n    } else {\n      this.nextState = false\n    }\n  }\n\n  advanceState() {\n    this.living = this.nextState\n    this.nextState = null\n  }\n}\n\n// const zero = new Cell(0,0)\n// const one = new Cell(0,1)\n// const ok = new Cell(1,1)\n// const last = new Cell(0, )\n// const bot = new Cell(maxRow-1, 0)\n// const corner = new Cell(maxRow-1, maxCol-1)\n\n// export default Cell\n","import { CANVAS_WIDTH, CANVAS_HEIGHT, BOX_WIDTH, GRID_COLOR, LIVE_COLOR,\n        maxRow, maxCol } from './constants.js'\nimport Cell from \"./Cell\"\n\n// set initial state\nexport const drawGrid = (ctx, numRows, numCols) => {\n  ctx.strokeStyle = GRID_COLOR\n  ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT)\n  for (let rowID=0; rowID < numRows; rowID++){\n    for (let colID=0; colID<numCols; colID++){\n      ctx.beginPath()\n      ctx.rect(colID*BOX_WIDTH,rowID*BOX_WIDTH,BOX_WIDTH,BOX_WIDTH)\n      ctx.stroke()\n    }\n  }\n}\n\nexport const blankCellGrid = (w, h) => [...Array(w)].map((_,i)=>[...Array(h)].map((_,j)=>new Cell(i,j,w,h)))\nexport const randomCellGrid = (w, h, density) => [...Array(w)].map(row=>[...Array(h)].map(cell=>Math.random()<density))\n\n// pure helper functions\nexport const isValidCell = (row, col) => (row>=0 && row<maxRow && col>=0 && col<maxCol)\nexport const getFillColor = (thisCell) => thisCell.living ? LIVE_COLOR : 'white'\n\nexport const getRowColID = (e, documentOrigin=false, canvasNode=null) => {\n  let offsetX, offsetY\n  if (documentOrigin && canvasNode != null) {\n    offsetX = e.clientX - canvasNode.getBoundingClientRect().left\n    offsetY = e.clientY - canvasNode.getBoundingClientRect().top\n  } else {\n    offsetX = e.offsetX\n    offsetY = e.offsetY\n  }\n  const rowID = Math.floor(offsetY/BOX_WIDTH)\n  const colID = Math.floor(offsetX/BOX_WIDTH)\n  return [rowID, colID]\n}\n\n// update/paint cells during lifecycle\nexport const fadeIn = (painter, ctx, interval) => {\n  let opacity = 0\n  const fader = setInterval(() => {\n    if (opacity >= 1) clearInterval(fader)\n    ctx.globalAlpha = opacity\n    painter()\n    opacity += 0.1\n  }, interval)\n}\n\nexport const paintCell = (ctx, thisCell) => {\n  ctx.beginPath()\n  ctx.fillStyle = getFillColor(thisCell)\n  ctx.fillRect(thisCell.col*BOX_WIDTH+1,thisCell.row*BOX_WIDTH+1,BOX_WIDTH-2,BOX_WIDTH-2)\n  ctx.stroke()\n}\n\nexport const paintAllCells = (ctx, grid) => {\n  grid.forEach((row, rowID) => {\n    row.forEach((thisCell, colID) => {\n      paintCell(ctx, thisCell)\n    })\n  })\n}\n\nexport const updateNeighborsLivingNeighbors = (cell, grid) => {\n  const updateVal = cell.living ? 1 : -1\n  cell.neighbors.forEach(([i, j]) => { grid[i][j].livingNeighbors += updateVal })\n}\n\nexport const toggleLife = (cell, grid) => {\n  cell.living = !cell.living\n  updateNeighborsLivingNeighbors(cell, grid)\n}\n\nexport const setClickDrawCursor = (canvasNode, eraseMode) => {\n  if (eraseMode === undefined) {\n    canvasNode.classList.remove('eraseMode', 'pencilMode')\n  } else if (eraseMode) {\n    canvasNode.classList.add('eraseMode')\n    canvasNode.classList.remove('pencilMode')\n  } else {\n    canvasNode.classList.add('pencilMode')\n    canvasNode.classList.remove('eraseMode')\n  }\n}\n\n// drag/drop patterns onto canvas\nexport const drawDragPattern = (patternCanvas, patternScheme) => {\n  const patternCtx = patternCanvas.getContext('2d')\n  patternCtx.strokeStyle = GRID_COLOR\n  patternScheme.forEach((row, rowID) => {\n    row.forEach((val, colID) => {\n      patternCtx.beginPath()\n      patternCtx.rect(colID*BOX_WIDTH,rowID*BOX_WIDTH,BOX_WIDTH,BOX_WIDTH)\n      patternCtx.stroke()\n      if (val === 1) {\n        patternCtx.beginPath()\n        patternCtx.fillStyle = LIVE_COLOR\n        patternCtx.fillRect(colID*BOX_WIDTH+1,rowID*BOX_WIDTH+1,BOX_WIDTH-2,BOX_WIDTH-2)\n        patternCtx.stroke()\n      }\n    })\n  })\n}\n\nexport const dropPattern = (ctx, grid, offsetX, offsetY, pattern) => {\n  const topRow = Math.round(offsetY/BOX_WIDTH + 0.4)\n  const leftCol = Math.round(offsetX/BOX_WIDTH + 0.1)\n  const botRow = topRow + pattern.length - 1\n  const rightCol = leftCol + pattern[0].length - 1\n  if (isValidCell(topRow, leftCol) && isValidCell(botRow, rightCol)) {\n    placePattern(ctx, grid, topRow, leftCol, pattern)\n  }\n}\n\nexport const placePattern = (ctx, grid, topRowID, leftColID, pattern) => {\n  for (let i=0; i < pattern.length; i++) {\n    for (let j=0; j < pattern[0].length; j++) {\n      const [rowID, colID] = [topRowID+i, leftColID+j]\n      const thisCell = grid[rowID][colID]\n      const patternVal = pattern[i][j]\n      if (thisCell.living != (patternVal === 1)) {\n        toggleLife(thisCell, grid)\n        paintCell(ctx, thisCell)\n      }\n    }\n  }\n}\n\nexport const cloneIntoCanvas = (ctx, grid, pattern) => {\n  for (let i=0; i < 6; i++) {\n    for (let j=0; j < 6; j++) {\n      const thisCell = grid[i][j]\n      const patternVal = i < pattern.length && j < pattern[0].length ? pattern[i][j] : 0\n      if (thisCell.living != (patternVal === 1)) {\n        toggleLife(thisCell, grid)\n        paintCell(ctx, thisCell)\n      }\n    }\n  }\n}\n\nexport const getPatternFromGrid = (grid) => grid.map(row => row.map(cell => cell.living ? 1 : 0))\nexport const clonePatternFromGrid = (grid, topLeft, botRight) => {\n  return grid.slice(topLeft[0], botRight[0]).map(row => {\n    return row.slice(topLeft[1], botRight[1]).map(cell => cell.living ? 1 : 0)\n  })\n}\n","import { CANVAS_WIDTH, CANVAS_HEIGHT, BOX_WIDTH, maxRow, maxCol, RAND_DENSITY,\n        spaceshipPatterns, LOCKED, EDITING, CLONING } from \"./constants.js\"\nimport { blankCellGrid, getRowColID, fadeIn, paintCell, paintAllCells, isValidCell,\n        getFillColor, updateNeighborsLivingNeighbors, toggleLife, setClickDrawCursor,\n        dropPattern, placePattern, drawDragPattern, drawGrid, randomCellGrid,\n        getPatternFromGrid, clonePatternFromGrid, cloneIntoCanvas } from \"./utilities.js\"\nimport Cell from \"./Cell\"\n\nconst canvas = document.getElementById('mainCanvas')\nconst ctx = canvas.getContext('2d')\nconst xHover = document.getElementById('xHover')\nconst yHover = document.getElementById('yHover')\nconst startButton = document.getElementById('startButton')\nconst resetButton = document.getElementById('resetButton')\nconst randomButton = document.getElementById('randomButton')\nconst spaceshipNodes = Object.fromEntries(new Map(\n  Object.keys(spaceshipPatterns).map(id => [id, document.getElementById(id)])\n))\nconst lockButton = document.getElementById('lockButton')\nconst editButton = document.getElementById('editButton')\nconst cloneButton = document.getElementById('cloneButton')\nconst customCanvas = document.getElementById('customCanvas')\nconst customCtx = customCanvas.getContext('2d')\n\n/* DRAW CANVASES */\nlet gridBoxes, customGrid\nconst init = () => {\n  gridBoxes = blankCellGrid(maxRow, maxCol)\n  drawGrid(ctx, maxRow, maxCol)\n  for (const [id, node] of Object.entries(spaceshipNodes)) {\n    node.setAttribute('width', BOX_WIDTH*spaceshipPatterns[id][0].length)\n    node.setAttribute('height', BOX_WIDTH*spaceshipPatterns[id].length)\n    drawDragPattern(node, spaceshipPatterns[id])\n  }\n  customGrid = blankCellGrid(6, 6)\n  customCanvas.setAttribute('width', BOX_WIDTH*6)\n  customCanvas.setAttribute('height', BOX_WIDTH*6)\n  drawGrid(customCtx, 6, 6)\n}\n\n/* CONWAY LIFE CYCLE */\n//  1. for all cells, determine next state based on current state, # living neighbors\n//  2. store next state in Cell instance variable\n//  3. loop cell by cell, keep/flip state based on stored next state\n//    a) set new state\n//    b) updateNeighborsLivingNeighbors\n//    c) nullify stored next state\n// end cycle, repeat with next animation frame\nconst setNextStates = () => {\n  gridBoxes.forEach((row, rowID) => {\n    row.forEach((thisCell, colID) => {\n      thisCell.setNextState() // conway rules\n    })\n  })\n}\n\nconst applyNextStates = () => {\n  gridBoxes.forEach((row, rowID) => {\n    row.forEach((thisCell, colID) => {\n      const stateFlip = thisCell.living != thisCell.nextState\n      thisCell.advanceState() // conway rules\n      if (stateFlip) {\n        updateNeighborsLivingNeighbors(thisCell, gridBoxes)\n      }\n    })\n  })\n}\n\nconst animate = () => {\n  setNextStates()\n  applyNextStates()\n  fadeIn(() => paintAllCells(ctx, gridBoxes), ctx, 8)\n}\n\n/* MAIN CANVAS */\n// button click handlers\nlet isRunning = false\nlet animator\nconst startListener = (e) => {\n  if (!isRunning) {\n    animator = setInterval(animate, 500)\n    startButton.innerHTML = \"Pause\"\n    startButton.classList.toggle(\"pause-button\", true)\n    startButton.classList.toggle(\"start-button\", false)\n  } else {\n    clearInterval(animator)\n    startButton.innerHTML = \"Start\"\n    startButton.classList.toggle(\"pause-button\", false)\n    startButton.classList.toggle(\"start-button\", true)\n  }\n  isRunning = !isRunning\n}\n\nconst resetListener = (e) => {\n  gridBoxes = blankCellGrid(maxRow, maxCol)\n  paintAllCells(ctx, gridBoxes)\n}\n\nconst randomListener = (e) => {\n  const seedArray = randomCellGrid(maxRow, maxCol, RAND_DENSITY)\n  gridBoxes.forEach((row, rowID) => {\n    row.forEach((thisCell, colID) => {\n      if (thisCell.living !== seedArray[rowID][colID]) {\n        toggleLife(thisCell, gridBoxes)\n      }\n    })\n  })\n  paintAllCells(ctx, gridBoxes)\n}\n\n// mouse event handlers\nlet drawingCells = false\nlet eraseMode = false\nconst clickDrawStartListener = (e) => {\n  const [rowID, colID] = getRowColID(e)\n  const thisCell = gridBoxes[rowID][colID]\n  eraseMode = thisCell.living\n  setClickDrawCursor(canvas, eraseMode)\n  drawingCells = true\n  toggleLife(thisCell, gridBoxes)\n  paintCell(ctx, thisCell)\n}\n\nconst mouseUpListener = (canvasNode) => (e) => {\n  setClickDrawCursor(canvasNode)\n  drawingCells = false\n}\n\nconst moveListener = (e) => {\n  const [rowID, colID] = getRowColID(e)\n  rowHover.innerHTML = rowID\n  colHover.innerHTML = colID\n  if (drawingCells && isValidCell(rowID, colID)) {\n    const thisCell = gridBoxes[rowID][colID]\n    if (eraseMode === thisCell.living) {\n      toggleLife(thisCell, gridBoxes)\n      paintCell(ctx, thisCell)\n    }\n  }\n}\n\nlet dragImage = null\nconst dragPatternStartListener = (pattern, originNode) => (e) => {\n  let shiftX = e.clientX - originNode.getBoundingClientRect().left\n  let shiftY = e.clientY - originNode.getBoundingClientRect().top\n  let clonedYet = false\n\n  const moveAt = (pageX, pageY) => {\n    if (dragImage) {\n      dragImage.style.left = pageX - shiftX + 'px'\n      dragImage.style.top = pageY - shiftY + 'px'\n    }\n  }\n\n  const movePatternListener = (e) => {\n    if (!clonedYet) {\n      dragImage = originNode.cloneNode(true)\n      dragImage.setAttribute('id', 'dragPattern')\n      dragImage.style.position = 'absolute'\n      dragImage.style.zIndex = 1000\n      drawDragPattern(dragImage, pattern)\n      document.body.append(dragImage)\n      clonedYet = true\n    }\n    moveAt(e.pageX, e.pageY)\n  }\n\n  const dropPatternListener = (e) => {\n    document.removeEventListener('mousemove', movePatternListener)\n    document.removeEventListener('mouseup', dropPatternListener)\n    if (clonedYet) {\n      const offsetX = e.clientX - shiftX - canvas.getBoundingClientRect().left\n      const offsetY = e.clientY - shiftY - canvas.getBoundingClientRect().top\n      dropPattern(ctx, gridBoxes, offsetX, offsetY, pattern)\n      document.body.removeChild(dragImage)\n      dragImage = null\n      clonedYet = false\n    }\n  }\n\n  document.addEventListener('mousemove', movePatternListener)\n  document.addEventListener('mouseup', dropPatternListener)\n}\n\n/* CUSTOM CANVAS */\nconst customStates = [{ button: lockButton, class: \"locked-pattern\" },\n                      { button: editButton, class: \"editing-pattern\" },\n                      { button: cloneButton, class: \"cloning-pattern\" }]\nlet curCustomState = LOCKED\nlet customDragPatternListener\nconst setCustomState = (newState) => {\n  customStates.forEach((stateProps, state) => {\n    const isNewState = (state == newState)\n    stateProps.button.disabled = isNewState\n    customCanvas.classList.toggle(stateProps.class, isNewState)\n  })\n  switch (newState) {\n    case LOCKED:\n      let customPattern = getPatternFromGrid(customGrid)\n      customDragPatternListener = dragPatternStartListener(customPattern, customCanvas)\n      customCanvas.addEventListener('mousedown', customDragPatternListener)\n      canvas.classList.toggle(\"crosshairMode\", false)\n      canvas.addEventListener('mousedown', clickDrawStartListener)\n      canvas.removeEventListener('mousedown', cloneStartListener)\n      document.removeEventListener('mousemove', cloneDragListener)\n      document.removeEventListener('mouseup', cloneEndListener)\n    break\n    case EDITING:\n      customCanvas.removeEventListener('mousedown', customDragPatternListener)\n      canvas.classList.toggle(\"crosshairMode\", false)\n      canvas.addEventListener('mousedown', clickDrawStartListener)\n      canvas.removeEventListener('mousedown', cloneStartListener)\n      document.removeEventListener('mousemove', cloneDragListener)\n      document.removeEventListener('mouseup', cloneEndListener)\n    break\n    case CLONING:\n      customCanvas.removeEventListener('mousedown', customDragPatternListener)\n      canvas.classList.toggle(\"crosshairMode\", true)\n      canvas.removeEventListener('mousedown', clickDrawStartListener)\n      canvas.addEventListener('mousedown', cloneStartListener)\n      document.addEventListener('mousemove', cloneDragListener)\n      document.addEventListener('mouseup', cloneEndListener)\n    break\n  }\n  curCustomState = newState\n}\n\n// button click handlers\nconst lockListener = (e) => { setCustomState(LOCKED) }\nconst editListener = (e) => { setCustomState(EDITING) }\nconst cloneListener = (e) => { setCustomState(CLONING) }\n\n// mouse event handlers\nconst moveCustomListener = (e) => {\n  const [rowID, colID] = getRowColID(e)\n  rowHover.innerHTML = rowID\n  colHover.innerHTML = colID\n  if (drawingCells && (rowID >= 0 && rowID < 6 && colID >= 0 && colID < 6)) {\n    const thisCell = customGrid[rowID][colID]\n    if (eraseMode === thisCell.living) {\n      toggleLife(thisCell, customGrid)\n      paintCell(customCtx, thisCell)\n    }\n  }\n}\n\nconst clickDrawCustomListener = (e) => {\n  if (curCustomState == CLONING) setCustomState(EDITING)\n  if (curCustomState == EDITING) {\n    const [rowID, colID] = getRowColID(e)\n    const thisCell = customGrid[rowID][colID]\n    eraseMode = thisCell.living\n    setClickDrawCursor(customCanvas, eraseMode)\n    drawingCells = true\n    toggleLife(thisCell, customGrid)\n    paintCell(customCtx, thisCell)\n  }\n}\n\nlet cloneSelecting = false\nlet cloneTopLeft, cloneBotRight, clonePattern, cloneFrame\nconst cloneStartListener = (e) => {\n  const [rowID, colID] = getRowColID(e)\n  if (!cloneFrame) {\n    cloneFrame = document.createElement('div')\n    cloneFrame.setAttribute('id', 'cloneFrame')\n    cloneFrame.style.position = 'absolute'\n    cloneFrame.style.zIndex = 1000\n    cloneFrame.style.width = BOX_WIDTH*6 + 'px'\n    cloneFrame.style.height = BOX_WIDTH*6 + 'px'\n    cloneFrame.style.border = '3px solid #59cbda'\n    drawCloneFrame(rowID, colID)\n    document.body.appendChild(cloneFrame)\n  }\n  cloneTopLeft = [rowID, colID]\n  cloneBotRight = [Math.min(cloneTopLeft[0]+6, maxRow), Math.min(cloneTopLeft[1]+6, maxCol)]\n  clonePattern = clonePatternFromGrid(gridBoxes, cloneTopLeft, cloneBotRight)\n  cloneIntoCanvas(customCtx, customGrid, clonePattern)\n  cloneSelecting = true\n}\n\nconst cloneDragListener = (e) => {\n  const [rowID, colID] = getRowColID(e, true, canvas)\n  if (cloneSelecting && isValidCell(rowID, colID)) {\n    cloneTopLeft = [rowID, colID]\n    cloneBotRight = [Math.min(cloneTopLeft[0]+6, maxRow), Math.min(cloneTopLeft[1]+6, maxCol)]\n    drawCloneFrame(rowID, colID)\n    clonePattern = clonePatternFromGrid(gridBoxes, cloneTopLeft, cloneBotRight)\n    cloneIntoCanvas(customCtx, customGrid, clonePattern)\n  }\n}\n\nconst cloneEndListener = (e) => {\n  cloneSelecting = false\n  if (cloneFrame) {\n    document.body.removeChild(cloneFrame)\n    cloneFrame = null\n  }\n}\n\nconst drawCloneFrame = (rowID, colID) => {\n  const canvasLeftX = canvas.getBoundingClientRect().left + window.scrollX\n  const canvasTopY = canvas.getBoundingClientRect().top + window.scrollY\n  const shiftX = colID*BOX_WIDTH\n  const shiftY = rowID*BOX_WIDTH\n  cloneFrame.style.left = canvasLeftX + shiftX + 'px'\n  cloneFrame.style.top = canvasTopY + shiftY + 'px'\n  const cellW =  Math.min(6, maxCol - colID)\n  const cellH = Math.min(6, maxRow - rowID)\n  cloneFrame.style.width = BOX_WIDTH*cellW + 'px'\n  cloneFrame.style.height = BOX_WIDTH*cellH + 'px'\n}\n\n/* EVENT LISTENER ASSIGNMENTS */\n// handles drawing/erasing cells in canvas\ncanvas.addEventListener('mousemove', moveListener)\ndocument.addEventListener('mouseup', mouseUpListener(canvas))\ncanvas.addEventListener('mousedown', clickDrawStartListener)\n// handles pattern drag and drop\nfor (const [id, node] of Object.entries(spaceshipNodes)) {\n  node.addEventListener('mousedown', dragPatternStartListener(spaceshipPatterns[id], node))\n  node.addEventListener('dragstart', () => false)\n}\n// handles button presses (main canvas)\nstartButton.addEventListener('click', startListener)\nresetButton.addEventListener('click', resetListener)\nrandomButton.addEventListener('click', randomListener)\n// handles button presses (custom canvas)\nlockButton.addEventListener('click', lockListener)\neditButton.addEventListener('click', editListener)\ncloneButton.addEventListener('click', cloneListener)\n// custom pattern canvas behavior\ncustomCanvas.addEventListener('mousemove', moveCustomListener)\ndocument.addEventListener('mouseup', mouseUpListener(customCanvas))\ncustomCanvas.addEventListener('mousedown', clickDrawCustomListener)\n// reset cell ID display upon leaving canvas\ncanvas.addEventListener('mouseout',() => {\n  rowHover.innerHTML = '---'\n  colHover.innerHTML = '---'\n})\n\n/* run upon loading script */\ninit()\n"]}